%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Script from Alex to analyze the data recorded from Unity (performance)
% The file 'closed_loop_data.mat' is generated by the script
% load_and_save_Data.m
% Analyses data for the closed-loop experiments
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s

%% load the data and save as .mat
clear all;
close all;
clc;

load('Archive/closed_loop_data.mat');
nSub = 35;
%% PRELIMINARY ANALYSIS
% s4 Evaluation - Distance & Time repartition
clc

dist_to_wp_ = [];
dist_to_wp = [];
time_between_wp_ = [];
time_between_wp = [];

for i = 1:nSub
    if(~isempty(subject(i).torso_s4_wpdt)) %if torso
        dist_to_wp_ = [dist_to_wp_; subject(i).torso_s4_wpdt.data(:,1)];
        time_between_wp_ = [time_between_wp_; subject(i).torso_s4_wpdt.data(:,2)];  
    elseif(~isempty(subject(i).torso_arm_s4_wpdt)) %if torso + arms
        dist_to_wp_ = [dist_to_wp_; subject(i).torso_arm_s4_wpdt.data(:,1)];
        time_between_wp_ = [time_between_wp_; subject(i).torso_arm_s4_wpdt.data(:,2)];
    end
end

mean_dist_ = mean(dist_to_wp_);
std_dist_ = std(dist_to_wp_);

lost = 0;
for i = 1 : size(dist_to_wp_)
    if(dist_to_wp_(i) > mean_dist_+ 2.5*std_dist_) %outlier
        lost = lost + 1;
    else
        dist_to_wp = [dist_to_wp; dist_to_wp_(i)];
    end
end

outlier_dist = mean(dist_to_wp)+2.5*std(dist_to_wp);

a = sprintf('dist_to_wp: mean = %0.2fm, std = %0.2fm, outliers = %d\n', mean(dist_to_wp),std(dist_to_wp),lost);
b = sprintf('            mean + 2.5*std = %0.2fm', outlier_dist);
disp([a, b]);

mean_time_ = mean(time_between_wp_);
std_time_ = std(time_between_wp_);

lost = 0;
for i = 1 : size(time_between_wp_)
    if(time_between_wp_(i) > mean_time_+ 2.5*std_time_) %outlier
        lost = lost + 1;
    else
        time_between_wp = [time_between_wp; time_between_wp_(i)];
    end
end

outlier_time = mean(time_between_wp)+2.5*std(time_between_wp);

a = sprintf('time_between_wp: mean = %0.2fs, std = %0.2fs, outliers = %d\n', mean(time_between_wp),std(time_between_wp),lost);
b = sprintf('            mean + 2.5*std = %0.2fs', outlier_time);
disp([a, b]);

%% Performance metrics
% radius_waypoint = 0.6; %[m] radius of the cloud waypoint
% sequence_wp_count = 42; %42 waypoints per sequence (2 sequences)
% min_completion_time_air = 2 * 1647.4 / 12; %[s] minimal time to reach each waypoints (1647.4 m)
% max_completion_time_air = 1.5 * min_completion_time_air;
% min_completion_time_village = 1571.6 / 12 + 1741.1 / 12; %[s] minimal time to reach each waypoints (1647.4 m)
% max_completion_time_village = 1.5 * min_completion_time_village;

%outlier_dist = 18.5; %(mean+2.5*std of s4 (pilot torso))
%outlier_time = 9.4; %(mean+2.5*std of s4 (pilot torso))

syms sigma
eqn = exp(-outlier_dist^2/sigma^2) == 0.01;
sigma_sol = double(solve(eqn,sigma));
sigma_sqr = sigma_sol(1)^2;

compute_dist_performance = @(distances) ...
                      100*mean(exp(-(distances.^2./sigma_sqr))); % 1% = 18.5m (mean+2.5*std of s4 (pilot torso))
                  
count_too_long_time = @(times) ...
                      sum(times > outlier_time);

% compute_time_performance_air = @(total_time) ...
%                       (max_completion_time_air - min(total_time,max_completion_time_air))/ ...
%                       (max_completion_time_air - min_completion_time_air);
%                   
% compute_time_performance_village = @(total_time) ...
%                       (max_completion_time_village - min(total_time,max_completion_time_village))/ ...
%                       (max_completion_time_village - min_completion_time_village);
                

%% ANALYSIS
% Training s3
clc
clearvars torso_subject_result torso_arm_subject_result

plot_per_subject = 0;
plot_per_flightstyle = 1;

size_window = 1;
torso_index = 1;
torso_arm_index = 1;

for i = 1:nSub %for each subject
    if(~isempty(subject(i).torso_s3_wpdt)) %if torso
        for j = size_window:size(subject(i).torso_s3_wpdt.data,1)
            torso_subject_result(torso_index).s3(j-size_window+1,1) = compute_dist_performance(subject(i).torso_s3_wpdt.data(j-size_window+1:j,1));
            torso_subject_result(torso_index).s3(j-size_window+1,2) = sum(subject(i).torso_s3_wpdt.data(1:j,2));
            torso_subject_idx(torso_index) = i;
        end
        torso_subject_result(torso_index).s3(1,3) = count_too_long_time(subject(i).torso_s3_wpdt.data(:,2));
        torso_subject_result(torso_index).s3(1,4) = i;
        torso_subject_result(torso_index).s3(1,5) = size(subject(i).torso_s3_wpdt.data,1);
        
        if(plot_per_subject)
            %plot a graph per subject
            figure
            plot(torso_subject_result(torso_index).s3(:,2),torso_subject_result(torso_index).s3(:,1),'.-')
            xlabel('Time [s]')
            ylabel('Percentage')
            title(sprintf('Training performance (torso) - subject %i - %iWP - NCC:%i',torso_subject_result(torso_index).s3(1,4)...
                                                                              ,torso_subject_result(torso_index).s3(1,5)...
                                                                              ,torso_subject_result(torso_index).s3(1,3)));
            ylim([0 100])
        end
        
        torso_index = torso_index + 1;
       
    elseif(~isempty(subject(i).torso_arm_s3_wpdt)) %if torso + arms
        for j = size_window:size(subject(i).torso_arm_s3_wpdt.data,1)
            torso_arm_subject_result(torso_arm_index).s3(j-size_window+1,1) = compute_dist_performance(subject(i).torso_arm_s3_wpdt.data(j-size_window+1:j,1));
            torso_arm_subject_result(torso_arm_index).s3(j-size_window+1,2) = sum(subject(i).torso_arm_s3_wpdt.data(1:j,2));
            torso_arm_subject_idx(torso_arm_index) = i;
        end
        torso_arm_subject_result(torso_arm_index).s3(1,3) = count_too_long_time(subject(i).torso_arm_s3_wpdt.data(:,2));
        torso_arm_subject_result(torso_arm_index).s3(1,4) = i;
        torso_arm_subject_result(torso_arm_index).s3(1,5) = size(subject(i).torso_arm_s3_wpdt.data,1);
        
        if(plot_per_subject)
            %plot a graph per subject
            figure
            plot(torso_arm_subject_result(torso_arm_index).s3(:,2),torso_arm_subject_result(torso_arm_index).s3(:,1),'.-')
            xlabel('Time [s]')
            ylabel('Percentage')
            title(sprintf('Training performance (torso+arms) - subject %i - %iWP - NCC:%i',torso_arm_subject_result(torso_arm_index).s3(1,4)...
                                                                                          ,torso_arm_subject_result(torso_arm_index).s3(1,5)...
                                                                                          ,torso_arm_subject_result(torso_arm_index).s3(1,3)));
            ylim([0 100])
        end
        
        torso_arm_index = torso_arm_index + 1;
    end
end

if(plot_per_flightstyle)
   %torso
    figure(10)
    clf
   for i = 1%:size(torso_subject_result,2)
      plot(torso_subject_result(i).s3(:,2),torso_subject_result(i).s3(:,1))
%       plot(torso_subject_result(i).s3(:,1))
      hold on
   end
   xlabel('Time [s]')
   ylabel('Percentage')
   title(sprintf('Training performance (torso)'));
   ylim([0 100])
   
   % %torso + arms
   figure(11)
   clf
   for i = 1:size(torso_arm_subject_result,2)
      plot(torso_arm_subject_result(i).s3(:,2),torso_arm_subject_result(i).s3(:,1))
%       plot(torso_arm_subject_result(i).s3(:,1))
 
   end
   xlabel('Time [s]')
   ylabel('Percentage')
   title(sprintf('Training performance (torso + arms)'));
   ylim([0 100])
end

% 



%% ANALYSIS
% Evaluation s4
clc

%plot choice
plot_per_subject = 0;
plot_per_flightstyle = 0;
plot_performance = 1;

%size sliding window
size_window = 5;
size_window_plot_performance = 1;

for n = 1:2
    clearvars torso_subject_result torso_arm_subject_result
    torso_index = 1;
    torso_arm_index = 1;
    
    for i = 1:nSub %for each subject
        if(~isempty(subject(i).torso_s4_wpdt)) %if torso
            for j = size_window:size(subject(i).torso_s4_wpdt.data,1)
                torso_subject_result(torso_index).s4(j-size_window+1,1) = compute_dist_performance(subject(i).torso_s4_wpdt.data(j-size_window+1:j,1));
                torso_subject_result(torso_index).s4(j-size_window+1,2) = sum(subject(i).torso_s4_wpdt.data(1:j,2));
            end
            torso_subject_result(torso_index).s4(1,3) = count_too_long_time(subject(i).torso_s4_wpdt.data(:,2));
            torso_subject_result(torso_index).s4(1,4) = i;
            torso_subject_result(torso_index).s4(1,5) = size(subject(i).torso_s4_wpdt.data,1);

            if(plot_per_subject)
                %plot a graph per subject
                figure(1)
                plot(torso_subject_result(torso_index).s4(:,2),torso_subject_result(torso_index).s4(:,1),'.-')
                xlabel('Time [s]')
                ylabel('Percentage')
                title(sprintf('Evaluation performance (torso) - subject %i - %iWP - NCC:%i',torso_subject_result(torso_index).s4(1,4)...
                                                                                  ,torso_subject_result(torso_index).s4(1,5)...
                                                                                  ,torso_subject_result(torso_index).s4(1,3)));
                ylim([0 100])
            end

            torso_index = torso_index + 1;

        elseif(~isempty(subject(i).torso_arm_s4_wpdt)) %if torso + arms
            for j = size_window:size(subject(i).torso_arm_s4_wpdt.data,1)
                torso_arm_subject_result(torso_arm_index).s4(j-size_window+1,1) = compute_dist_performance(subject(i).torso_arm_s4_wpdt.data(j-size_window+1:j,1));
                torso_arm_subject_result(torso_arm_index).s4(j-size_window+1,2) = sum(subject(i).torso_arm_s4_wpdt.data(1:j,2));
            end
            torso_arm_subject_result(torso_arm_index).s4(1,3) = count_too_long_time(subject(i).torso_arm_s4_wpdt.data(:,2));
            torso_arm_subject_result(torso_arm_index).s4(1,4) = i;
            torso_arm_subject_result(torso_arm_index).s4(1,5) = size(subject(i).torso_arm_s4_wpdt.data,1);

            if(plot_per_subject)
                %plot a graphe per subject
                figure(2)
                plot(torso_arm_subject_result(torso_arm_index).s4(:,2),torso_arm_subject_result(torso_arm_index).s4(:,1),'.-')
                xlabel('Time [s]')
                ylabel('Percentage')
                title(sprintf('Evaluation performance (torso+arms) - subject %i - %iWP - NCC:%i',torso_arm_subject_result(torso_arm_index).s4(1,4)...
                                                                                              ,torso_arm_subject_result(torso_arm_index).s4(1,5)...
                                                                                              ,torso_arm_subject_result(torso_arm_index).s4(1,3)));
                ylim([0 100])
            end

            torso_arm_index = torso_arm_index + 1;
        end
    end
    
    if(plot_per_flightstyle)
        %torso
        figure(3)
        for i = 1:size(torso_subject_result,2)
            plot(torso_subject_result(i).s4(:,2),torso_subject_result(i).s4(:,1))
            hold on
        end
        xlabel('Time [s]')
        ylabel('Percentage')
        title(sprintf('Evaluation performance (torso)'));
        ylim([0 100])
        

        %torso + arms
        figure(4)
        for i = 1:size(torso_arm_subject_result,2)
            plot(torso_arm_subject_result(i).s4(:,2),torso_arm_subject_result(i).s4(:,1))
            hold on
        end
        xlabel('Time [s]')
        ylabel('Percentage')
        title(sprintf('Evaluation performance (torso + arms)'));
        ylim([0 100])
    end

    size_window = size_window_plot_performance;
    plot_per_subject = 0;
    plot_per_flightstyle = 0;
end

if(plot_performance)
    % Torso
    figure(5)
    for i =1:size(torso_subject_result,2)
        perf_torso(i,1) = mean(torso_subject_result(i).s4(:,1));
        perf_torso(i,2) = std(torso_subject_result(i).s4(:,1));
    end
    bar(1:size(torso_subject_result,2),perf_torso(:,1))
    hold on;
    h = errorbar(1:size(torso_subject_result,2),perf_torso(:,1),perf_torso(:,2),'k'); 
    set(h,'linestyle','none')
    ylim([0 100])
    xlabel('Subjects')
    ylabel('Percentage')
    title(sprintf('Performance Torso - s4 Evaluation'));
    text(9,perf_torso(9,1)+5,'dizzy','color','r','HorizontalAlignment','center');
    
    %Torso + arms
    figure(6)
    for i =1:size(torso_arm_subject_result,2)
        perf_torso_arm(i,1) = mean(torso_arm_subject_result(i).s4(:,1));
        perf_torso_arm(i,2) = std(torso_arm_subject_result(i).s4(:,1));
    end
    bar(1:size(torso_arm_subject_result,2),perf_torso_arm(:,1))
    hold on;
    h = errorbar(1:size(torso_arm_subject_result,2),perf_torso_arm(:,1),perf_torso_arm(:,2),'k'); 
    set(h,'linestyle','none')
    ylim([0 100])
    xlabel('Subjects')
    ylabel('Percentage')
    title(sprintf('Performance Torso+arms - s4 Evaluation'));
end

figure(11); clf; hold on
bar(0.5,mean(perf_torso([1:8,10:end],1)),0.4,'EdgeColor','none','FaceColor','k')  % Exclude subject 9, sick
bar(1,mean(perf_torso_arm([1:13,15:end],1)),0.4,'EdgeColor','none','FaceColor','r')
errorbar([0.5,1],[mean(perf_torso([1:8,10:end],1)),mean(perf_torso_arm([1:13,15:end],1))],[std(perf_torso([1:8,10:end],1)),std(perf_torso_arm([1:13,15:end],1))],'.k','LineWidth',1)
set(gca,'XTick',[0.5,1],'XTickLabel',{'Torso','Torso+Arms'})
title('Average Performance')
ylim([0 100])
ylabel('Performance (%)')

[p,h] = ranksum(perf_torso([1:8,10:end],1),perf_torso_arm([1:13,15:end],1))

% %% Analysis: Stress in air s6
% clc
% 
% %we remove the first subject because the setup changed after him (improvements)
% for i = 2:11
%     if(~isempty(torso_subject(i).stress_in_air_s6_WPdt) && 84 == size(torso_subject(i).stress_in_air_s6_WPdt(:,1),1))
%         temp = sum(torso_subject(i).stress_in_air_s6_WPdt);
%         torso_s6_results(i-1,1) = 0.5*compute_dist_performance(torso_subject(i).stress_in_air_s6_WPdt(:,1)) + ...
%                                   0.5*compute_time_performance_air(temp(2)); % performance
%         torso_s6_results(i-1,2) = temp(2); % total time
%         torso_s6_results(i-1,3) = temp(1); % total distance
%     else
%         torso_s6_results(i-1,1) = 0; %performance
%         torso_s6_results(i-1,2) = 0; % total time
%         torso_s6_results(i-1,3) = 0; % total distance
%     end
% end
% 
% %plot of the performance
% figure
% h = bar(torso_s6_results(:,1)*100);
% title('Torso Flight Style - Air + task s6')
% xlabel('Subject')
% ylabel('Performance [%]');
% ylim([0 100])
% 
% %plot of the evaluation
% figure
% h = bar(torso_s6_results(:,2:3));
% title('Torso Flight Style - Stress in air s6')
% xlabel('Subject')
% legend(h,['Time [s]    ' ; 'Distance [m]']);
% 
% %% Analysis: village without stress s7
% clc
% 
% %we remove the first subject because the setup changed after him (improvements)
% for i = 2:11
%     if(~isempty(torso_subject(i).village_free_s7_WPdt) && 84 == size(torso_subject(i).village_free_s7_WPdt(:,1),1))
%         temp = sum(torso_subject(i).village_free_s7_WPdt);
%         torso_s7_results(i-1,1) = 0.5*compute_dist_performance(torso_subject(i).village_free_s7_WPdt(:,1)) + ...
%                                   0.5*compute_time_performance_village(temp(2)); % performance
%         torso_s7_results(i-1,2) = temp(2); % total time
%         torso_s7_results(i-1,3) = temp(1); % total distance
%     else
%         torso_s7_results(i-1,1) = 0; %performance
%         torso_s7_results(i-1,2) = 0; % total time
%         torso_s7_results(i-1,3) = 0; % total distance
%     end
% end
% 
% %plot of the performance
% figure
% h = bar(torso_s7_results(:,1)*100);
% title('Torso Flight Style - Village free s7')
% xlabel('Subject')
% ylabel('Performance [%]');
% ylim([0 100])
% 
% %plot of the evaluation
% figure
% h = bar(torso_s7_results(:,2:3));
% title('Torso Flight Style - Village free s7')
% xlabel('Subject')
% legend(h,['Time [s]    ' ; 'Distance [m]']);
% 
% %% Analysis: village with stress s8
% clc
% 
% %we remove the first subject because the setup changed after him (improvements)
% for i = 2:11
%     if(~isempty(torso_subject(i).village_free_s8_WPdt) && 84 == size(torso_subject(i).village_free_s8_WPdt(:,1),1))
%         temp = sum(torso_subject(i).village_free_s8_WPdt);
%         torso_s8_results(i-1,1) = 0.5*compute_dist_performance(torso_subject(i).village_free_s8_WPdt(:,1)) + ...
%                                   0.5*compute_time_performance_village(temp(2)); % performance
%         torso_s8_results(i-1,2) = temp(2); % total time
%         torso_s8_results(i-1,3) = temp(1); % total distance
%     else
%         torso_s8_results(i-1,1) = 0; %performance
%         torso_s8_results(i-1,2) = 0; % total time
%         torso_s8_results(i-1,3) = 0; % total distance
%     end
% end
% 
% %plot of the performance
% figure
% h = bar(torso_s8_results(:,1)*100);
% title('Torso Flight Style - Village + task s8')
% xlabel('Subject')
% ylabel('Performance [%]');
% ylim([0 100])
% 
% %plot of the evaluation
% figure
% h = bar(torso_s8_results(:,2:3));
% title('Torso Flight Style - Village + task s8')
% xlabel('Subject')
% legend(h,['Time [s]    ' ; 'Distance [m]']);
% 
% %% Summary plots per subjects
% for i = 1:10
%    figure
%    x = [torso_s4_results(i,1) torso_s6_results(i,1) torso_s7_results(i,1) torso_s8_results(i,1)];
%    h = bar(x*100);
%    title(sprintf('Torso Flight Style - subject %d',i));
%    xlabel('Phase');
%    set(gca,'xticklabel',['   air (s4)   '; ' air+task (s6)' ;'vill free (s7)'; 'vill+task (s8)']);
%    ylabel('Performance [%]');
%    ylim([0 100]);
%    if(torso_s7_results(i,1) == 0)
%        text(2.7,10,'3 collisions');
%    end
%    if(torso_s8_results(i,1) == 0)
%        text(3.7,10,'3 collisions');
%    end
% end
% 
% %% save data 
% 
% save('torso_results.mat')
% 
% %% compute distance and time for a perfect flight
% % total_dist = 0;
% % for i = 2:43
% %    dx = waypoint_pos(i,1)-waypoint_pos(i-1,1);
% %    dy = waypoint_pos(i,2)-waypoint_pos(i-1,2);
% %    dz = waypoint_pos(i,3)-waypoint_pos(i-1,3);
% %    norm = (dx^2 + dy^2 + dz^2)^0.5;
% %    total_dist = total_dist + norm;
% % end